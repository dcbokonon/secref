name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write

jobs:
  # Dependency vulnerability scanning
  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Dependabot security scan
      uses: dependabot/dependabot-core@v1
      
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate
        
    - name: Run pip-audit for Python dependencies
      run: |
        pip install pip-audit
        pip-audit -r requirements.txt
        pip-audit -r admin/requirements.txt
        pip-audit -r tests/requirements.txt

  # Code security scanning with CodeQL
  codeql:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [ 'javascript', 'python' ]
    steps:
    - uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Container security scanning
  container-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t secref:test .
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'secref:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Python security scanning
  python-security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install bandit safety
        
    - name: Run Bandit security linter
      run: |
        bandit -r admin/ scripts/ -f json -o bandit-report.json
        
    - name: Run Safety check
      run: |
        safety check -r requirements.txt
        safety check -r admin/requirements.txt

  # JavaScript security scanning
  javascript-security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint security plugin
      run: |
        npm install --save-dev eslint-plugin-security
        npx eslint . --ext .js,.jsx,.ts,.tsx
        
    - name: Run Snyk vulnerability test
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  # OWASP ZAP scan (for deployed sites)
  owasp-zap:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.9.0
      with:
        target: 'https://secref.org'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'